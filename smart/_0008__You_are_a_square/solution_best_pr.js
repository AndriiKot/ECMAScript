function isSquare(n) {
  return Math.sqrt(n) % 1 === 0;
}

/*
 В JavaScript функция `Math.sqrt` ведет себя иначе, 
чем в Ruby, когда речь идет о вычислении квадратного корня. 
В частности, при вычислении квадратного корня 
из отрицательных чисел JavaScript не вызывает ошибки, 
а возвращает значение `NaN` (Not-a-Number). 
Это поведение позволяет вам вызвать функцию 
`Math.sqrt` с отрицательными числами, 
но результатом будет `NaN`, который не является действительным числом.

Рассмотрим ваш JavaScript код:

```javascript
function isSquare(n) {
  return Math.sqrt(n) % 1 === 0;
}
```

Когда вы передаете отрицательное 
число, например `-1`, результатом будет:

```javascript
Math.sqrt(-1) // возвращает NaN
```

При выполнении `NaN % 1` результатом будет `NaN`. 
Таким образом, выражение `NaN === 0` вернет `false`, 
и функция `isSquare` корректно вернет `false` для отрицательных чисел.

Если вы хотите, чтобы функция `isSquare` 
работала корректно и не возвращала `true` 
для отрицательных чисел, вы можете добавить проверку на неотрицательность:

```javascript
function isSquare(n) {
  return n >= 0 && Math.sqrt(n) % 1 === 0;
}
```

Теперь функция будет возвращать `false` 
для всех отрицательных чисел, 
а для неотрицательных будет проверять, 
является ли число квадратом целого числа.   \
*/
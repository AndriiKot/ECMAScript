const findOdd = (xs) => xs.reduce((a, b) => a ^ b);

/*
Пояснение работы функции:
XOR (^): Операция XOR возвращает 
true (или 1 в числовом представлении), 
если количество единиц (1) в операндах нечетное. 
В контексте чисел, если два одинаковых 
числа XOR'ятся, результат будет 0 (например, a ^ a = 0), 
а если число XOR'ится само с собой нечетное количество раз, 
результат будет само это число (например, x ^ 0 = x).

reduce: Метод reduce применяется к массиву xs и 
последовательно применяет функцию (в данном случае, 
операцию XOR) к элементам массива. Он принимает 
два аргумента: аккумулятор (в данном случае a) 
и текущий элемент (в данном случае b).

Что делает findOdd:
Функция находит число, которое встречается 
в массиве нечетное количество раз. 
Это возможно, потому что операция XOR 
обладает свойством "аннулирования": 
если одно и то же число встречается дважды, 
оно "уничтожает" само себя в результате (т.е., 
результат будет 0 для парных чисел), и в 
итоге останется только то число, которое 
встречается нечетное количество раз.
Пример:
 
console.log(findOdd([1, 2, 3, 2, 3, 1, 3])); // 
вернет 3, так как 3 встречается 3 раза (нечетное количество раз)
Таким образом, функция findOdd эффективно 
находит число, которое встречается в массиве нечетное количество раз.
*/